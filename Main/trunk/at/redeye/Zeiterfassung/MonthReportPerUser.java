/*
 * MonthReport.java
 *
 * Created on 6. März 2009, 10:26
 */

package at.redeye.Zeiterfassung;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Locale;
import java.util.Vector;

import org.joda.time.DateMidnight;

import at.redeye.FrameWork.base.AutoLogger;
import at.redeye.FrameWork.base.AutoMBox;
import at.redeye.FrameWork.base.BaseDialog;
import at.redeye.FrameWork.base.Root;
import at.redeye.FrameWork.base.bindtypes.DBStrukt;
import at.redeye.FrameWork.base.reports.ReportRenderer;
import at.redeye.UserManagement.UserManagementInterface;
import at.redeye.UserManagement.bindtypes.DBPb;

/**
 *
 * @author  martin
 */
public class MonthReportPerUser extends BaseDialog {
    
    public static class UserItem
    {
        String name;
        DBPb pb;
        
        public UserItem( String name, DBPb pb )
        {
            this.name = name;
            this.pb = pb;
        }
        
        @Override
        public String toString()
        {
         return name;
        }
        
        public DBPb getPb()
        {
            return pb;
        }
    }

    int mon;
    int year;
    String currentUser;
    int currentUserId;
    
    /** Creates new form MonthReport */
    public MonthReportPerUser( Root root, int mon, int year ) {
        super( root, "Monatsbericht für " + root.getUserName() );
        initComponents();
        
        if( mon <= 0 || 
            mon > 12 ||
            year <= 0 )
        {
            DateMidnight dm = new DateMidnight();
            mon = dm.getMonthOfYear();
            year = dm.getYear();
        }
        
        this.mon = mon;
        this.year = year;                
        currentUser = root.getUserName();
        currentUserId = root.getUserId();
                        
        if( root.getUserPermissionLevel() > UserManagementInterface.UM_PERMISSIONLEVEL_NORMAL)
        {
            fetchUsers();

            JCUser.addActionListener(new ActionListener() {

                public void actionPerformed(ActionEvent e) {
                    UserItem ui = (UserItem) JCUser.getSelectedItem();

                    if (ui == null) {
                        return;
                    }
                    currentUser = ui.toString();
                    currentUserId = ui.getPb().getUserId();

                    setMonth();
                }
            });
        } else {
            JCUser.setVisible(false);
        }
        
        setMonth();              
    }
    
    public static String getTitle(int mon, int year )
    {
        return getTitle( new DateMidnight( year, mon, 1 ));
    }

    public static String getTitle(DateMidnight d) {
		return d.monthOfYear().getAsText(Locale.GERMAN) + " "
				+ Integer.toString(d.getYear());
	}
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jReport = new javax.swing.JEditorPane();
        plusMon = new javax.swing.JButton();
        minusMon = new javax.swing.JButton();
        jBPrint = new javax.swing.JButton();
        JCUser = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jReport.setContentType("text/html");
        jReport.setEditable(false);
        jScrollPane1.setViewportView(jReport);

        plusMon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/at/momm/FrameWork/framework/resources/icons/next.png"))); // NOI18N
        plusMon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plusMonActionPerformed(evt);
            }
        });

        minusMon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/at/momm/FrameWork/framework/resources/icons/prev.png"))); // NOI18N
        minusMon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minusMonActionPerformed(evt);
            }
        });

        jBPrint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/at/momm/FrameWork/framework/resources/icons/print.png"))); // NOI18N
        jBPrint.setText("Drucken");
        jBPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBPrintActionPerformed(evt);
            }
        });

        JCUser.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 668, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(minusMon)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(plusMon)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 438, Short.MAX_VALUE)
                        .addComponent(jBPrint)
                        .addGap(12, 12, 12))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(JCUser, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(JCUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 389, Short.MAX_VALUE)
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(minusMon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(plusMon))
                    .addComponent(jBPrint))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void plusMonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plusMonActionPerformed

   mon++;
   
   if( mon >= 12 )
   {
       mon = 1;
       year++;
   }
   
   setMonth();   
}//GEN-LAST:event_plusMonActionPerformed

private void minusMonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minusMonActionPerformed

    mon--;
    
    if( mon <= 0 )
    {
        mon = 12;
        year--;
    }
    
    setMonth();    
}//GEN-LAST:event_minusMonActionPerformed

private void jBPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBPrintActionPerformed


    new AutoMBox("jBPrintActionPerformed") {    
            @Override
            public void do_stuff() throws Exception {                
                jReport.print();
            }
    };
        
}//GEN-LAST:event_jBPrintActionPerformed
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox JCUser;
    private javax.swing.JButton jBPrint;
    private javax.swing.JEditorPane jReport;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton minusMon;
    private javax.swing.JButton plusMon;
    // End of variables declaration//GEN-END:variables
    


    private void setMonth() 
    {
        setTitle("Monatsbericht " + getTitle(mon, year) + " für " + currentUser);

        ReportRenderer rr = new MonthReportPerUserRenderer(getTransaction(), mon, year, currentUser, currentUserId);

        if (rr.collectData()) {
            jReport.setText(rr.render());
            jReport.setCaretPosition(0);
        }

    }
    
    private void fetchUsers()
    {
        new AutoLogger("fetchUsers") {

            @Override
            public void do_stuff() throws Exception {
                
                // auf locked wollen wir hier nicht einschränken,
                // denn auch bei Usersn, die gesperrt sind dürfen wir nachschauen
                
                Vector<DBStrukt> users = getTransaction().fetchTable(new DBPb(),                        
                        " order by " + getTransaction().markColumn("surname"));
                
                JCUser.removeAllItems();
                
                for( DBStrukt s : users )
                {
                    DBPb pb = (DBPb)s;                                        
                    
                    UserItem ui = new UserItem(pb.getUserName(), pb);
                    
                    JCUser.addItem( ui );
                    
                    if( pb.getUserId() == currentUserId )
                    {
                        JCUser.setSelectedItem(ui);
                    }
                }
            }
        };
    }

}
